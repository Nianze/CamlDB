Types in CamlDB:
  CamlDB supports 4 types:
  STRING - A string
        ex: "Alex", "bob", "EVE", "fIONA", "BSDFJ DFJS:L", "'''"

  FLOAT - IEEE double-precision floating point, equivalent to C's double
        ex: 3.14, 2e+19, 2E+19, -31.5, -2e+19, -2E+19, 9e+0, 80E-1, 5.

  INT - 31-bit signed int (roughly +/- 1 billion) on 32-bit
        processors, or 63-bit signed int on 64-bit processors
        ex: 001, 3, -35, -00134

  BOOL - A boolean, written either true or false
        ex: true, false

Table Names and Colunm Names:
  [string] - The name should start with 'a'-'z' or '_', other letters in name should among letters ['a'-'z'], ['A'-'Z'], numbers ['0'-'9'] and '_'
  Example:
    _data_table, student42, _TABLE, sColumn

Colunm list:
  [colunm name list] - separate by comma. Support wildcard to choose all.
  The first letter of each colunm has to be among 'a'-'z' and '_'.

  Example:
    *
    col_Name1, col_Name2, col_Name3

Conditions:
  [condition] -
    Syntax: [column name] [operator] [value]

    [column name]: [column name] must have been defined and satisfy the basic conditions above.

    [operator] :
      There are 6 operators that CamlDB support:
        >   greater than
        <   smaller than
        =   equal to
        >=  greater or equal
        <=  smaller or equal
        <>  not equal

  [conditions]:
    Syntax:
      [condition]
      ([conditions])
      [conditions] AND [conditions]
      [conditions] OR [conditions]
    Note: AND has precedence over OR

PLOT:
  When select two numerical type colunm, user is able to use command "#SCATTER" or "#LINE" to visualize the outcome 2-dimensional table.

  Syntax:
    SELECT col1,col2 FROM tb1 #SCATTER;
    SELECT TOP 10 col1,col2 FROM tb2 #LINE;
    SELECT DISTINCT col1,col3 FROM tb3 #SCATTER;

  Syntax Rules:
    Plot command goes with SELECT command, and always appears at the end of each query, started by sign "#".
    #SCATTER
    Draw a two-dimensional scatter graph.
    #LINE
    Draw a two-dimensional line graph.


CREATE TABLE
    Create a table by specifying the name and type of each column and store
    the table in cache. When exit from CamlDB or user SAVE, each table in cache
    will be stored into separate json files named [tablename.json].

  Syntax:
    CREATE TABLE
    CREATE TABLE [table name]
    ([column name 1] [column type 1],
    [column name 2] [column type 2],
    ...
    [column name n] [column type n]);

  Syntax Rules:
    [table name]: case-sensitive; support use any string except for the
    built-in words reserved for instructions, such as INT, CREATE. The first letter have to be among 'a'-'z' and '_'.
    If creating a table with the same name as existing table, CamlDB will
    warn the user and let the user to confirm whether he wants the old table to be overwritten.

    [column name]: case-sensitive; support use any string except for the
    built-in words reserved for instructions, such as INT, CREATE. The first letter have to be among 'a'-'z' and '_'.

    [column type]: support 4 types: INT, FLOAT, STRING, BOOL


  Example:
    CREATE TABLE person
      (
      personID INT,
      lastName STRING,
      firstName STRING,
      address STRING,
      city STRING,
      age INT,
      americanCitizen BOOL,
      salary FLOAT
      );


INSERT INTO
  Syntax:
    INSERT INTO [table name]
    ([column value 1], [column value 2], ... , [column value n]);

  Syntax Rules:
    [table name]: case-sensitive; table must exist either in current file,
    stored as [tablename.json] or in cache.

    [column value i]: The column values inserted must match the exact type
    in the right order of the columns defined.

  Example:
    INSERT INTO person VALUES
    (1, "Tang", "Yuyan", "address", "NYC", 34, false, 341.34);


INSERT INTO COLUMNS
  insert a row with some columns specified and set the unspecified columns
  to be default values

  Syntax:
    INSERT INTO [table name]
    ([column name1], [column name 2], ... , [column name m])
    ([column value 1], [column value 2], ... , [column value m]);

  Syntax Rules:
    [table name]: case-sensitive; table must exist either in current file,
    stored as [tablename.json] or in cache.

    [column name i]: [column name i] must have been defined.

    [column value i]: The [column value i] inserted must match the exact type
    of [column name i] defined.

  Example:
    INSERT INTO person (personID, lastName, firstName, city)
    VALUES
    (2, "Andy", "Forest", "NYC");


UPDATE
  Update the whole table by setting every row of column i to be value i and
  leave the rest of columns unchanged.

  Syntax:
    UPDATE [table name]
    SET
    [column name 1] = [value 1],
    [column name 2] = [value 2],
    ... ,
    [column name n] = [value n];

  Syntax Rules:
    [table name]: case-sensitive; table must exist either in current file,
    stored as [tablename.json] or in cache.

    [column name i]: [column name i] must have been defined.

    [column value i]: The [column value i] updated must match the exact type
    of [column name i] defined.

  Example:
    UPDATE person SET personID = 4, city = "Ithaca";

UPDATE WHERE
  update all the rows that satisfy the conditions

  Syntax:
    UPDATE [table name]
    SET
    [column name 1] = [value 1],
    [column name 2] = [value 2],
    ... ,
    [column name n] = [value n];
    WHERE [conditions]

  Syntax Rules:
    [table name]: case-sensitive; table must exist either in current file,
    stored as [tablename.json] or in cache.

    [column name i]: [column name i] must have been defined.

    [column value i]: The [column value i] updated must match the exact type of [column name i] defined.

    [conditions]: specified above

  Example:
    UPDATE person SET personID = 4 WHERE city = "Ithaca" AND personID > 0;
  Example:
    UPDATE person SET personID = 4, city = "Ithaca";


SELECT TOP
  Specify the number of records to return.

  Syntax:
    SELECT TOP [number of rows] / [number percent] PERCENT
    [column name list]
    FROM [table name];

  Syntax Rules:

    [number of rows]: integer; if [number of rows] is larger than the actual
    number of rows of table, CamlDB will return the full table.

    [number percent] PERCENT: [number percent] is an integer that is in the range [0, 100] inclusive. The actual number of rows selected is going to be rounded to the greatest integer <= numrow * [number percent] / 100

    [column name list]: case-sensitive; separate by comma. Support wildcard to choose all. The first letter of each colunm have to be among 'a'-'z' and '_'.

    [table name]: Case-sensitive; table has to exist.

    [column type]: support 4 types: INT, FLOAT, STRING, BOOL

  Example:
    SELECT TOP 10 * FROM table1;
    SELECT TOP 50 PERCENT co1,col2 FROM tb;


SELECT DISTINCT
  Select only distinct values in selected colunm

  Syntax:
    SELECT DISTINCT [column name]
    FROM [table name];

  Syntax Rules:
    [column name]: case-sensitive; The first letter of each colunm has to be among 'a'-'z' and '_'. Support wildcard to choose all.

    [table name]: case-sensitive; table has to exist. The first letter has to be among 'a'-'z' and '_'.

  Example:
    SELECT DISTINCT hours FROM data WHERE name = "Joseph" OR score >= 4.;

SELECT UNION
  Union two tables together with selected colunms. Columns must match in terms of types

  Syntax:
    SELECT [colunm name list] FROM [table name 1]
    UNION ALL
    SELECT [colunm name list] FROM [table name 2]

  Syntax Rules:
    [column name list]: case-sensitive; separate by comma. Support wildcard to choose all. The first letter of each colunm has to be among 'a'-'z' and '_'.

    [table name i]: Case-sensitive; table has to exist. The first letter has to be among 'a'-'z' and '_'.

  Example:
    SELECT name,score FROM student UNION ALL SELECT * FROM class;

SELECT JOIN
  Combine rows from two or more tables, based on a common field between them.

  Syntax:
    SELECT [path list] FROM [table name 1]
    JOIN [table name 2]
    ON [join conditions]

  Syntax Rules:
    [path list]: refers to [table name].[colunm name], such as data.hours and student.score; both table name and colunm name are case-sensitive. The first letter of table and colunm name has to be among 'a'-'z' and '_'.

    [table name i]: Case-sensitive; table has to exist. The first letter has to be among 'a'-'z' and '_'.

    [join condition]: refers to [table1.colunm1]=[table2.column2], indicating the type of table1.colunm1 should be the same as that of table2.colunm2 to join the two table.

  Example:
    SELECT tb1.col1, tb2.col2 FROM tb1
    JOIN tb2
    ON tb1.col3=tb2.col2;
