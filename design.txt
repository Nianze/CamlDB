Types in CamlDB:
  CamlDB supports 4 types:
  STRING - A string
        ex: "Alex", "bob", "EVE", "fIONA", "BSDFJ DFJS:L", "'''"

  FLOAT - IEEE double-precision floating point, equivalent to C's double
        ex: 3.14, 2e+19, 2E+19, -31.5, -2e+19, -2E+19, 9e+0, 80E-1, 5.

  INT - 31-bit signed int (roughly +/- 1 billion) on 32-bit
        processors, or 63-bit signed int on 64-bit processors
        ex: 001, 3, -35, -00134

  BOOL - A boolean, written either true or false
        ex: true, false

Conditions:
  [condition] -
    Syntax: [column name] [operator] [value]

    [column name]: [column name] must have been defined.
    [operator] :
      There are 6 operators that CamlDB support:
        >   greater than
        <   smaller than
        =   equal to
        >=  greater or equal
        <=  smaller or equal
        <>  not equal

  [conditions] -
    Syntax:
      [condition]
      ([conditions])
      [conditions] AND [conditions]
      [conditions] OR [conditions]
    Note: AND has precedence over OR

CREATE TABLE
    Create a table by specifying the name and type of each column and store
    the table in cache. When exit from CamlDB or user SAVE, each table in cache
    will be stored into separate json files named [tablename.json].

  Syntax:
    CREATE TABLE
    CREATE TABLE [table name]
    ([column name 1] [column type 1],
    [column name 2] [column type 2],
    ...
    [column name n] [column type n]);

  Syntax Rules:
    [table name]: case-sensitive; support use any string except for the
    built-in words reserved for instructions, such as INT, CREATE. The first letter have to be among 'a'-'z' and '_'.
    If creating a table with the same name as existing table, CamlDB will
    warn the user and let the user to confirm whether he wants the old table to be overwritten.

    [column name]: case-sensitive; support use any string except for the
    built-in words reserved for instructions, such as INT, CREATE. The first letter have to be among 'a'-'z' and '_'.

    [column type]: support 4 types: INT, FLOAT, STRING, BOOL


  Example:
    CREATE TABLE person
      (
      personID INT,
      lastName STRING,
      firstName STRING,
      address STRING,
      city STRING,
      age INT,
      americanCitizen BOOL,
      salary FLOAT
      );


INSERT INTO
  Syntax:
    INSERT INTO [table name]
    ([column value 1], [column value 2], ... , [column value n]);

  Syntax Rules:
    [table name]: case-sensitive; table must exist either in current file,
    stored as [tablename.json] or in cache.

    [column value i]: The column values inserted must match the exact type
    in the right order of the columns defined.

  Example:
    INSERT INTO person VALUES
    (1, "Tang", "Yuyan", "address", "NYC", 34, false, 341.34);


INSERT INTO COLUMNS
  insert a row with some columns specified and set the unspecified columns
  to be default values

  Syntax:
    INSERT INTO [table name]
    ([column name1], [column name 2], ... , [column name m])
    ([column value 1], [column value 2], ... , [column value m]);

  Syntax Rules:
    [table name]: case-sensitive; table must exist either in current file,
    stored as [tablename.json] or in cache.

    [column name i]: [column name i] must have been defined.

    [column value i]: The [column value i] inserted must match the exact type
    of [column name i] defined.

  Example:
    INSERT INTO person (personID, lastName, firstName, city)
    VALUES
    (2, "Andy", "Forest", "NYC");


UPDATE
  Update the whole table by setting every row of column i to be value i and
  leave the rest of columns unchanged.

  Syntax:
    UPDATE [table name]
    SET
    [column name 1] = [value 1],
    [column name 2] = [value 2],
    ... ,
    [column name n] = [value n];

  Syntax Rules:
    [table name]: case-sensitive; table must exist either in current file,
    stored as [tablename.json] or in cache.

    [column name i]: [column name i] must have been defined.

    [column value i]: The [column value i] updated must match the exact type
    of [column name i] defined.

  Example:
    UPDATE person SET personID = 4, city = "Ithaca";

UPDATE WHERE
  update all the rows that satisfy the conditions

  Syntax:
    UPDATE [table name]
    SET
    [column name 1] = [value 1],
    [column name 2] = [value 2],
    ... ,
    [column name n] = [value n];
    WHERE [conditions]

  Syntax Rules:
    [table name]: case-sensitive; table must exist either in current file,
    stored as [tablename.json] or in cache.

    [column name i]: [column name i] must have been defined.

    [column value i]: The [column value i] updated must match the exact type
    of [column name i] defined.

    [conditions]: specified above

  Example:
    UPDATE person SET personID = 4 WHERE city = "Ithaca" AND personID > 0;


  Example:
    UPDATE person SET personID = 4, city = "Ithaca";


SELECT TOP
  Specify the number of records to return.

  Syntax:
    SELECT TOP [number of rows] / [number percent] PERCENT
    [column name list]
    FROM [table name];

  Syntax Rules:

    [number of rows]: integer; if [number of rows] is larger than the actual
    number of rows of table, CamlDB will return the full table.

    [number percent] PERCENT: [number percent] is an integer that is in the
    range [0, 100] inclusive. The actual number of rows selected is going to
    be rounded to the greatest integer <= numrow * [number percent] / 100

    [column name list]: case-sensitive; separate by comma.

    [table name]: Case-sensitive; table has to exist.

    [column type]: support 4 types: INT, FLOAT, STRING, BOOL

  Example:
    CREATE TABLE data (name STRING, hours FLOAT, score INT);

SELECT DISTINCT
  Select only distinct values in selected colunm
  Syntax:
    SELECT DISTINCT [column name]
    FROM [table name];

  Syntax Rules:
    [column name]: case-sensitive; The first letter have to be among 'a'-'z' and '_'.

    [table name]: case-sensitive; The first letter have to be among 'a'-'z' and '_'.

